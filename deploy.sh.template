#!/bin/bash

# IntelliQuest Cloud Run Deployment Script Template
# This script automates the deployment process to Google Cloud Run
# Copy this file to deploy.sh and set your environment variables

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
PROJECT_ID="${GOOGLE_CLOUD_PROJECT_ID:-intelliquest-hackathon}"
SERVICE_NAME="${CLOUD_RUN_SERVICE_NAME:-intelliquest-app}"
REGION="${CLOUD_RUN_REGION:-asia-northeast1}"
IMAGE_NAME="gcr.io/${PROJECT_ID}/${SERVICE_NAME}"

# Check if environment variables are set
if [[ -z "${NEXT_PUBLIC_FIREBASE_API_KEY}" ]]; then
    print_error "Environment variables not set. Please copy .env.production.template to .env.production and set your values."
    print_error "Then run: source .env.production"
    exit 1
fi

print_status "üöÄ Starting IntelliQuest deployment to Google Cloud Run..."

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    print_error "gcloud CLI is not installed. Please install it first:"
    echo "https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Check if Docker is running
if ! docker info &> /dev/null; then
    print_error "Docker is not running. Please start Docker first."
    exit 1
fi

# Set the project
print_status "Setting Google Cloud project to ${PROJECT_ID}..."
gcloud config set project ${PROJECT_ID}

# Enable required APIs
print_status "Enabling required Google Cloud APIs..."
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable containerregistry.googleapis.com

# Build the Docker image
print_status "Building Docker image..."
docker build -t ${IMAGE_NAME} .

# Push the image to Google Container Registry
print_status "Pushing image to Google Container Registry..."
docker push ${IMAGE_NAME}

# Deploy to Cloud Run
print_status "Deploying to Cloud Run with environment variables..."
gcloud run deploy ${SERVICE_NAME} \
    --image=${IMAGE_NAME} \
    --platform=managed \
    --region=${REGION} \
    --allow-unauthenticated \
    --port=3000 \
    --memory=1Gi \
    --cpu=1 \
    --min-instances=0 \
    --max-instances=10 \
    --timeout=300 \
    --set-env-vars="NODE_ENV=production" \
    --set-env-vars="NEXT_TELEMETRY_DISABLED=1" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_APP_ID=${NEXT_PUBLIC_FIREBASE_APP_ID}" \
    --set-env-vars="NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID}" \
    --set-env-vars="GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}" \
    --set-env-vars="GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION}" \
    --set-env-vars="GOOGLE_CLOUD_MODEL=${GOOGLE_CLOUD_MODEL}" \
    --set-env-vars="NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}" \
    --set-env-vars="NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION}" \
    --set-env-vars="NEXT_PUBLIC_USE_FIREBASE_EMULATORS=${NEXT_PUBLIC_USE_FIREBASE_EMULATORS}"

# Get the service URL
SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format='value(status.url)')

print_success "üéâ Deployment completed successfully!"
print_success "üåê Your application is live at: ${SERVICE_URL}"

# Test the deployment
print_status "Testing the deployment..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/api/health" || echo "000")

if [ "$HTTP_STATUS" = "200" ]; then
    print_success "‚úÖ Health check passed - application is running correctly!"
else
    print_warning "‚ö†Ô∏è  Health check failed (HTTP ${HTTP_STATUS}) - please check the logs"
    print_status "You can check logs with:"
    echo "gcloud logs read --service=${SERVICE_NAME} --region=${REGION}"
fi

# Optional: Open the application in browser (macOS)
if [[ "$OSTYPE" == "darwin"* ]]; then
    read -p "üåê Open the application in your browser? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        open "${SERVICE_URL}"
    fi
fi

print_success "üöÄ Deployment script completed!"
print_status "üìù Next steps:"
echo "   1. Set up your custom domain (optional)"
echo "   2. Configure environment variables in Cloud Run console"
echo "   3. Set up monitoring and alerts"
echo "   4. Configure CI/CD pipeline"

print_status "üìã Useful commands:"
echo "   - View logs: gcloud logs read --service=${SERVICE_NAME} --region=${REGION}"
echo "   - Update service: gcloud run services update ${SERVICE_NAME} --region=${REGION}"
echo "   - Delete service: gcloud run services delete ${SERVICE_NAME} --region=${REGION}" 