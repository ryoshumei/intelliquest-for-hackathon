rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user can read resource
    function canRead(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    // Helper function to check if user can write resource
    function canWrite(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    // Users collection - users can only access their own user document
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Surveys collection - user data isolation
    match /surveys/{surveyId} {
      // Read: Only survey owner can read individual documents
      allow read: if canRead(resource);
      
      // List: Allow authenticated users to query surveys (repository handles filtering)
      allow list: if isAuthenticated();
      
      // Create: Authenticated users can create surveys for themselves
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.ownerId &&
                       validateSurveyData(request.resource.data);
      
      // Update: Only survey owner can update their surveys
      allow update: if canWrite(resource) && 
                       request.auth.uid == request.resource.data.ownerId &&
                       validateSurveyData(request.resource.data);
      
      // Delete: Only survey owner can delete their surveys
      allow delete: if canWrite(resource);
    }
    
    // Survey responses collection
    match /survey_responses/{responseId} {
      // Read: Survey owner can read responses to their surveys
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/surveys/$(resource.data.surveyId)) &&
                     get(/databases/$(database)/documents/surveys/$(resource.data.surveyId)).data.ownerId == request.auth.uid;
      
      // Create: Anyone can create responses (supports anonymous responses)
      allow create: if validateResponseData(request.resource.data);
      
      // Update/Delete: Only response creator (if logged in) or survey owner
      allow update, delete: if (resource.data.respondentId != null && 
                                isOwner(resource.data.respondentId)) ||
                               (isAuthenticated() && 
                                exists(/databases/$(database)/documents/surveys/$(resource.data.surveyId)) &&
                                get(/databases/$(database)/documents/surveys/$(resource.data.surveyId)).data.ownerId == request.auth.uid);
    }
    
    // Validation functions
    function validateSurveyData(data) {
      return data.keys().hasAll(['title', 'description', 'ownerId', 'questions', 'isActive', 'createdAt', 'updatedAt']) &&
             data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
             data.description is string && data.description.size() <= 1000 &&
             data.ownerId is string &&
             data.questions is list && data.questions.size() <= 50 &&
             data.isActive is bool &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             validateQuestions(data.questions);
    }
    
    function validateQuestions(questions) {
      return questions.size() == 0 || 
             questions.size() <= 50;
    }
    
    function validateQuestion(question) {
      return question.keys().hasAll(['id', 'text', 'type', 'isRequired']) &&
             question.id is string && question.id.size() > 0 &&
             question.text is string && question.text.size() > 0 && question.text.size() <= 500 &&
             question.type is string && question.type in ['text', 'multiple-choice', 'single-choice', 'scale', 'yes-no'] &&
             question.isRequired is bool;
    }
    
    function validateResponseData(data) {
      return data.keys().hasAll(['id', 'surveyId', 'responses', 'startedAt', 'isComplete']) &&
             data.id is string && data.id.size() > 0 &&
             data.surveyId is string && data.surveyId.size() > 0 &&
             data.responses is list &&
             data.startedAt is timestamp &&
             data.isComplete is bool &&
             (data.submittedAt == null || data.submittedAt is timestamp) &&
             data.responses.size() <= 100;
    }
    
    // Deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 